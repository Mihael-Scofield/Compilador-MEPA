tabela_simbolos_init
Tabela de Simbolos: (topo:-1 e tamanho: 0)
program     # program 
ident      # cmdIf 
abre_parenteses      # ( 
ident      # input 
virgula      # , 
ident      # output 
fecha_parenteses     # ) 
pt_virgula      # ; 
var      # var 
ident      # i 
tabela_simbolos_push: token i e 0 addrs 0x7fffa51fe1c8.
Tabela de Simbolos: (topo:0 e tamanho: 1)
0 - Ident [i], CAT [VS], nv_lex 0, deslocamento 0, 
virgula      # , 
ident      # j 
tabela_simbolos_push: token j e 1 addrs 0x7fffa51fe1c8.
Tabela de Simbolos: (topo:1 e tamanho: 2)
0 - Ident [i], CAT [VS], nv_lex 0, deslocamento 0, 
1 - Ident [j], CAT [VS], nv_lex 0, deslocamento 1, 
virgula      # , 
ident      # k 
tabela_simbolos_push: token k e 2 addrs 0x7fffa51fe1c8.
Tabela de Simbolos: (topo:2 e tamanho: 3)
0 - Ident [i], CAT [VS], nv_lex 0, deslocamento 0, 
1 - Ident [j], CAT [VS], nv_lex 0, deslocamento 1, 
2 - Ident [k], CAT [VS], nv_lex 0, deslocamento 2, 
dois pontos     # : 
inteiro     # integer 
tabela_simbolos_atualiza_tipo:.
Tabela de Simbolos: (topo:2 e tamanho: 3)
0 - Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
1 - Ident [j], CAT [VS], nv_lex 0, deslocamento 1, TIPO [ inteiro ]
2 - Ident [k], CAT [VS], nv_lex 0, deslocamento 2, TIPO [ inteiro ]
pt_virgula      # ; 
begin     # begin 
read     # read 
abre_parenteses      # ( 
ident      # j 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [j], CAT [VS], nv_lex 0, deslocamento 1, TIPO [ inteiro ]
fecha_parenteses     # ) 
pt_virgula      # ; 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
atribuicao      # := 
 numero      # 0 
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pt_virgula      # ; 
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
ident      # k 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [k], CAT [VS], nv_lex 0, deslocamento 2, TIPO [ inteiro ]
atribuicao      # := 
 numero      # 0 
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pt_virgula      # ; 
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
while     # while 
topo -1 - 0 
[0] - R00 
[1] - R01 
abre_parenteses      # ( 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
menor que     # < 
ident      # j 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [j], CAT [VS], nv_lex 0, deslocamento 1, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
fecha_parenteses     # ) 
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
pilha_vs_type_push:.
[ inteiro ][ desconhecido ]
do     # do 
begin     # begin 
if     # if 
abre_parenteses      # ( 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
divide      # div 
 numero      # 2 
pilha_vs_type_push:.
[ inteiro ]
resolveTipoP1P2toP1:Pilhas Diferentes 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f1
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f2
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  -1
 Pilha2

f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
vezes      # * 
 numero      # 2 
pilha_vs_type_push:.
[ inteiro ]
resolveTipoP1P2toP1:Pilhas Diferentes 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f1
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f2
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  -1
 Pilha2

f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
igual     # = 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
fecha_parenteses     # ) 
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
pilha_vs_type_push:.
[ inteiro ][ desconhecido ]
then     # then 
topo 1 - 1 
[0] - R00 
[1] - R01 
[2] - R10 
[3] - R11 
if     # if 
abre_parenteses      # ( 
ident      # k 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [k], CAT [VS], nv_lex 0, deslocamento 2, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
divide      # div 
 numero      # 2 
pilha_vs_type_push:.
[ inteiro ]
resolveTipoP1P2toP1:Pilhas Diferentes 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f1
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f2
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  -1
 Pilha2

f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
vezes      # * 
 numero      # 2 
pilha_vs_type_push:.
[ inteiro ]
resolveTipoP1P2toP1:Pilhas Diferentes 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f1
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  0
 Pilha2
[ inteiro ]
Depois pop f2
pilha 1 topo antes  -1
 Pilha1

pilha 2 topo antes  -1
 Pilha2

f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
igual     # = 
ident      # k 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [k], CAT [VS], nv_lex 0, deslocamento 2, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
fecha_parenteses     # ) 
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
pilha_vs_type_push:.
[ inteiro ][ desconhecido ]
then     # then 
topo 3 - 2 
[0] - R00 
[1] - R01 
[2] - R10 
[3] - R11 
[4] - R20 
[5] - R21 
write     # write 
abre_parenteses      # ( 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
virgula      # , 
 numero      # 0 
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
fecha_parenteses     # ) 
else     # else 
write     # write 
abre_parenteses      # ( 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ][ inteiro ]
virgula      # , 
 numero      # 1 
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ][ inteiro ][ inteiro ]
fecha_parenteses     # ) 
pt_virgula      # ; 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
atribuicao      # := 
ident      # i 
tabela_simbolos_busca_simbolo: Simbolo identificado.
Ident [i], CAT [VS], nv_lex 0, deslocamento 0, TIPO [ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ]
mais      # + 
 numero      # 1 
pilha_vs_type_push:.
[ inteiro ]
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
pt_virgula      # ; 
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
pilha_vs_type_push:.
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  1
 Pilha1
[ inteiro ][ inteiro ]
pilha 2 topo antes  1
 Pilha2
[ inteiro ][ inteiro ]
MESMA Pilha 
pilha 1 topo antes  0
 Pilha1
[ inteiro ]
pilha 2 topo antes  0
 Pilha2
[ inteiro ]
f1 1
f2 1
pilha_vs_type_push:.
[ inteiro ]
0 topo depois
end      # end 
pt_virgula      # ; 
end      # end 
tabela_simbolos_remove_vs_ultimo_nv_lex:.
Tabela de Simbolos: (topo:-1 e tamanho: 0)
ponto      # . 
Finalizando...
